syntax = "proto3";

package sc_proto;



message StreamingAudience {
    int32 id = 1;
    string name = 2;
    string avatarURL = 3;
    int32 gender = 4;
}

message StreamingGiftHits {
    StreamingAudience donator = 1;
    StreamingAudience donee = 2;
    int32 gitftId = 3;
    int32 hits= 4;
    string donationId = 5;
    int64 seq = 6;
}

message StreamingKtvCommands {
    message Push {
        StreamingAudience audience = 1;
        int32 backingTrackId = 2;
        int32 duration = 3;
        string songName = 4;
        string originalSinger = 5;
        StreamingAudience oprator = 6;
    }
    message Pop {
        StreamingAudience audience = 1;
        int32 backingTrackId = 2;
        StreamingAudience oprator = 3;
    }
    message Insert {
        StreamingAudience audience = 1;
        int32 backingTrackId = 2;
        StreamingAudience oprator = 3;
    }
    message Play {
        StreamingAudience audience = 1;
        int32 backingTrackId = 2;
        int32 duration = 3;
        string songName = 4;
        string originalSinger = 5;
        int64  ts = 6;
        StreamingAudience oprator = 7;
    }
}

message StreamingBGMCommands {
    message Play {
        string songName = 1;
        string originalSinger = 2;
    }
    message Pause {}
    message Resume {}
}

message StreamingUpdates {
    repeated StreamingUpdate  updates = 1;
}
message StreamingUpdate {
    oneof update{
        StreamingCommands.KtvUpdate ktvUpdate = 1;
        StreamingCommands.BGMUpdate BGMUpdate = 2;
    }
}


message StreamingEnvelope {
    int32 streaming_id = 1;
    oneof command {
        StreamingCommands.Tick tick= 2;
        StreamingCommands.Comment comment= 3;
        StreamingCommands.Entrance entrance= 4;
        StreamingCommands.UpdateOrators updateOrator= 5;
        StreamingCommands.UpdateBoxAudiences updateBoxAudiences= 6;
        StreamingCommands.SendSystemInfo sendSystemInfo = 7;
        StreamingCommands.SendGiftHits sendGiftHits = 8;
        StreamingCommands.Create create = 9;
        StreamingCommands.CreateAck createAck = 10;
        StreamingCommands.UserExit userExit = 11;
        StreamingCommands.KickUser kickUser = 12;
        StreamingCommands.MakeUserStreamingOrator makeUserStreamingOrator = 13;
        StreamingCommands.DismissUserStreamingOrator dismissUserStreamingOrator = 14;
        StreamingCommands.MakeUserStreamingAdmin makeUserStreamingAdmin = 15;
        StreamingCommands.DismissUserStreamingAdmin dismissUserStreamingAdmin = 16;
        StreamingCommands.InitializeStreaming initializeStreaming = 17;
        StreamingCommands.HeartBeat heartBeat = 18;
        StreamingCommands.UserOffline userOffline = 19;
        StreamingCommands.UpdateFollowers updateFollowers = 20;
        StreamingCommands.UpdatePayload updatePayload = 21;
        StreamingCommands.Talking talking = 22;
        StreamingCommands.UpdateSoutCoin updateSoutCoin = 23;
        StreamingCommands.ReEntrance reEntrance= 24;
        StreamingCommands.UserDisconnect userDisconnect= 25;
        StreamingCommands.KtvUpdate ktvUpdate = 26;
        StreamingCommands.UndercoverUpdate undercoverUpdate = 27;
        StreamingCommands.DrawsomethingUpdate drawsomethingUpdate = 28;
        StreamingCommands.BGMUpdate bgmUpdate = 29;
    }
    oneof query {
        StreamingQueries.GetCurrentUpdates getCurrentUpdates = 30;
        StreamingQueries.GetCurrentListenerShips getCurrentListenerShips  = 31;
    }
}

message StreamingCommands {
    message Tick {
    }
    message Comment {
        StreamingAudience user = 1;
        string text = 2;
        int32 typ = 3;
        string payload = 4;
    }
    message Entrance {
        StreamingAudience user = 1;
        string prologue = 2;
        bool not_display = 3;
    }
    message UpdateOrators {
        repeated StreamingAudience orators = 1;
    }
    message UpdateBoxAudiences {
        repeated StreamingAudience  boxAudiences = 1;
    }
    message SendSystemInfo {
        StreamingAudience user = 1;
        string text = 2;
    }
    message SendGiftHits{
        StreamingGiftHits giftHits  = 1;
    }
    message Create {
        int32 ownerUserId = 1;
    }
    message CreateAck {
    }
    message UserExit {
        int32 user_id = 1;
    }
    message KickUser {
        StreamingAudience user = 1;
    }
    message MakeUserStreamingOrator {
        StreamingAudience user = 1;
    }
    message DismissUserStreamingOrator {
        StreamingAudience user = 1;
    }
    message MakeUserStreamingAdmin {
        StreamingAudience user = 1;
    }
    message DismissUserStreamingAdmin {
        StreamingAudience user = 1;
    }
    message InitializeStreaming {
        int32 listenerShips = 1;
    }
    message HeartBeat {
        int32 userId = 1;
    }
    message UserOffline {
        int32 userId = 1;
    }
    message UpdateFollowers {
        repeated StreamingAudience  followers = 1;
    }
    message UpdatePayload {
        string  payload = 1;
    }
    message Talking {
        int32  userId = 1;
    }
    message UpdateSoutCoin {
        int64  soutCoin = 1;
    }
    message ReEntrance {
        int32 user_id= 1;
    }
    message UserDisconnect {
        int32 userId = 1;
    }
    message KtvUpdate {
        int32 version = 1;
        oneof command {
            StreamingKtvCommands.Push push = 2;
            StreamingKtvCommands.Pop pop = 3;
            StreamingKtvCommands.Insert insert = 4;
            StreamingKtvCommands.Play play = 5;
        }
    }
    message BGMUpdate {
        // option (scalapb.message).extends = "StreamingCommand";
        int32 version = 1;
        oneof command {
            StreamingBGMCommands.Play play = 2;
            StreamingBGMCommands.Pause pause = 3;
            StreamingBGMCommands.Resume resume = 4;
        }
    }
    message UndercoverUpdate {
        int32 version = 1;
        oneof command {
            StreamingUndercoverCommands.UpdatePlayer update_player = 2;
            StreamingUndercoverCommands.Shuffle shuffle = 3;
            StreamingUndercoverCommands.Deal deal = 4;
            StreamingUndercoverCommands.StartVote start_vote = 5;
            StreamingUndercoverCommands.Vote vote = 6;
            StreamingUndercoverCommands.Eliminate eliminate = 7;
            StreamingUndercoverCommands.GameOver game_over = 8;
            StreamingUndercoverCommands.PK pk = 9;
            StreamingUndercoverCommands.DieEliminate die_eliminate = 10;
        }
    }
    message DrawsomethingUpdate {
        // option (scalapb.message).extends = "StreamingCommand";
        int32 version = 1;
        oneof command {
            StreamingDrawsomethingCommands.UpdatePlayer update_player = 2;
            StreamingDrawsomethingCommands.Deal deal = 3;
            StreamingDrawsomethingCommands.Hint hint = 4;
            StreamingDrawsomethingCommands.Draw draw = 5;
            StreamingDrawsomethingCommands.CountDown count_down = 6;
            StreamingDrawsomethingCommands.NextRound next_round = 7;
            StreamingDrawsomethingCommands.Answer answer = 8;
            StreamingDrawsomethingCommands.GameOver game_over = 9;
        }
    }

}

message StreamingQueries {
    message GetCurrentUpdates {
    }

    message GetCurrentListenerShips {
    }
}

message StreamingEvents {
    message Created {
        int32 streaming_id = 1;
        int64 ts = 2;
        int32 ownerUserId = 3;
    }
}

message Payloads {
 repeated StreamingCommands.UpdatePayload payloads = 1;
}

message Comments {
    repeated StreamingCommands.Comment comments = 1;
}
message Entrances {
    repeated StreamingCommands.Entrance entrances = 2;
}
message StreamingAudiences {
    repeated StreamingAudience streamingAudiences = 1;
}

message SystemInfoList {
    repeated StreamingCommands.SendSystemInfo systemInfoList = 1;
}

message StreamingGiftHitsList {
    repeated StreamingCommands.SendGiftHits streamingGiftHitsList = 1;
}

message Ripples {
    repeated int32 ripples = 1;
}

message SoutCoin {
    int64 count = 1;
}
message StreamingBatchStruct {
    int32 streaming_id = 1;
    int64 seq = 2;
    int32 listenerShips = 3;
    Comments comments = 4;
    StreamingAudiences boxAudiences = 5;
    StreamingAudiences orators = 6;
    SystemInfoList systemInfoList = 7;
    StreamingGiftHitsList streamingGiftHitsList = 8;
    Entrances entrances = 9;
    StreamingAudiences followers = 10;
    Payloads payloads = 11;
    Ripples ripples = 12;
    SoutCoin soutCoin = 13;
}

// undercover
message StreamingPlayer {
    int32 user_id = 1;
    int32 position = 2;   //位置， 法官位置为0
    int32 score = 3;
}
message StreamingVote {
    int32 aye  = 1;         //投票的用户id
    StreamingPlayer suspect = 2;  //被投票的玩家
}

message DieResult {
    int32 winner = 1;//  赢家的 id
    int32 winner_score = 2;
    int32 loser_socre = 3;
}

message UndercoverCardRoles {
    repeated StreamingPlayer civilians = 1;  //平民
    repeated StreamingPlayer undercover = 2;  // 卧底
    string undercover_word = 3;    //卧底词汇
    string civilian_word = 4;       //平民词汇
}

message StreamingUndercover {
    int32 version = 1;
    UndercoverStage  stage = 2;
    StreamingPlayer judge = 3;   //法官
    repeated StreamingPlayer players = 4;  //所有玩家
    UndercoverCardRoles roles = 5;      //角色分配
    repeated StreamingVote votes = 6;    //当前投票的情况
    enum UndercoverStage {
        PREPARE = 0;           //选座阶段
        SHUFFLE = 1;            // 法官选卧底的阶段
        DESCRIBE = 2;          // 描述阶段
        VOTE = 3;              // 投票阶段
        PK = 4;                //  pk 阶段
        PK_VOTE = 5;           // pk投票阶段
    }
    repeated StreamingPlayer eliminated_players= 7;  // 被淘汰的玩家
    repeated StreamingPlayer pk_players= 8;  // 正在pk的玩家
    int32 round =9;  //当前的回合
}

message StreamingUndercoverCommands {
    message UpdatePlayer {
        repeated StreamingPlayer players = 1;
        StreamingPlayer judge = 2;
    }
    message Shuffle {}
    message Deal {
        UndercoverCardRoles roles = 1;
    }
    message StartVote {}
    message Vote {
        StreamingVote vote = 1;
    }
    message Eliminate {
        repeated StreamingPlayer eliminated= 1;
        int32 round = 2; // Deal 默认为第一轮
    }
    message DieEliminate{
        repeated StreamingPlayer eliminated= 1;
        int32 round = 2; // Deal 默认为第一轮
        DieResult die_result =3;
    }
    //  收到stage 变更为 PK,pk 时候只允许对 coordinators 投票
    message PK {
        repeated StreamingPlayer coordinators= 1;
    }
    //  收到游戏结束 stage 变更为 PREPARE
    message GameOver {
        bool undercover_win = 1;
    }
}

// guss the drawing
message DrawsomethingCardRoles {
    StreamingPlayer current_artist = 1;
    repeated string current_riddle = 2;
}

message StreamingDrawsomething {
    int32 version = 1;
    enum DrawsomethingStage {
        PREPARE = 0;
        SHUFFLE = 1;
        PAINTING = 2;
        DISCUSSING = 3;
    }
    DrawsomethingStage stage = 2;
    repeated StreamingPlayer players = 3;
    DrawsomethingCardRoles  current_roles = 4;
    repeated StreamingPlayer artists = 5;
    repeated StreamingPlayer corrects = 6;
}
message StreamingDrawsomethingCommands {
    message UpdatePlayer {
        repeated StreamingPlayer players = 1;
    }
    message Deal {
        DrawsomethingCardRoles  current_roles = 1;
    }
    message Hint {
        string text = 1;
    }
    message Draw {}
    message CountDown {}
    message NextRound {}
    message Answer {
        StreamingPlayer player = 1;
        int32 score = 2;
        bool correct = 3;
        string text = 4;
    }
    message GameOver {}
}